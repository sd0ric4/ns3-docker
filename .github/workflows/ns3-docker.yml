name: NS3 Docker Build

on:
  schedule:
    - cron: '0 0 * * *'  # 每天运行
  workflow_dispatch:      # 允许手动触发
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-ns3-version:
    runs-on: ubuntu-latest
    outputs:
      ns3_version: ${{ steps.get-version.outputs.version }}
      should_build: ${{ steps.check-version.outputs.should_build }}
    steps:
      - name: Get latest NS3 version
        id: get-version
        run: |
          LATEST_VERSION=$(curl -s https://www.nsnam.org/releases/ | 
            grep -o '<a href="/releases/ns-3-[0-9]\+/"' |
            grep -o '[0-9]\+' |
            awk '{if (length($1) > 1) print $1}' |
            sort -rn |
            head -n1 |
            awk '{print "3."$1}')
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: Check if new version
        id: check-version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_VERSION="${{ steps.get-version.outputs.version }}"
          # 检查是否存在使用此版本的镜像标签
          if ! gh api repos/${{ github.repository }}/packages | grep -q "ns3-v$LATEST_VERSION"; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-ns3-version
    if: needs.check-ns3-version.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: 'v2.2.4'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Log into registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Dockerfile
        run: |
          NS3_VERSION="${{ needs.check-ns3-version.outputs.ns3_version }}"
          cat > Dockerfile << EOF
          FROM ubuntu:24.04
          ENV DEBIAN_FRONTEND=noninteractive
          RUN apt-get update && apt-get install -y \\
              build-essential \\
              git \\
              wget \\
              g++ \\
              cmake \\
              libclang-dev \\
              llvm-dev \\
              python3 \\
              python3-dev \\
              python3-pip \\
              libsqlite3-dev \\
              libxml2-dev \\
              libgtk-3-dev \\
              && rm -rf /var/lib/apt/lists/*
          WORKDIR /opt
          RUN wget https://www.nsnam.org/releases/ns-allinone-${NS3_VERSION}.tar.bz2 && \\
              tar xjf ns-allinone-${NS3_VERSION}.tar.bz2 && \\
              rm ns-allinone-${NS3_VERSION}.tar.bz2
          WORKDIR /opt/ns-allinone-${NS3_VERSION}/ns-${NS3_VERSION}
          RUN ./ns3 configure --enable-examples --enable-tests
          RUN python3 -m pip install cppyy==3.1.2 --break-system-packages
          RUN ./ns3 configure --enable-python-bindings
          RUN ./ns3 build
          CMD ["/bin/bash"]
          EOF

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=ns3-v${{ needs.check-ns3-version.outputs.ns3_version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker image
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
